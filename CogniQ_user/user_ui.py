# -*- coding: utf-8 -*-
"""User UI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iGOW4Zf_5gKnp9DSvOeLNhs74DE_uio4
"""

import flet as ft
import datetime
import asyncio # Required for running async operations in Flet
from user_data_access import MentalHealthTrackerService # Import the service

def main(page: ft.Page):
    """
    Main function to build the Flet application GUI for the Community Mental Health Tracker.
    """
    page.title = "Community Mental Health Tracker"
    page.vertical_alignment = ft.CrossAxisAlignment.START
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.window_width = 800
    page.window_height = 600
    page.window_min_width = 700
    page.window_min_height = 500
    page.theme_mode = ft.ThemeMode.LIGHT # Default theme mode

    # Initialize the data access service
    service = MentalHealthTrackerService()

    # Placeholder for user ID (would come from authentication in a real app)
    # For demonstration, we'll use a fixed ID. In a real app, you'd create/fetch this.
    user_id = "demo_user_123"
    username = "DemoUser" # For initial user creation

    # --- UI Components ---

    # Mood Tracker Tab Content
    mood_slider = ft.Slider(
        min=1,
        max=5,
        divisions=4,
        label="{value}",
        value=3,
        width=300,
        # No direct print here, the log_mood function will handle the value
    )
    mood_feedback_text = ft.Text("Rate your mood (1: Very Low, 5: Very High)", size=16)
    mood_log_display = ft.Column([], scroll=ft.ScrollMode.ADAPTIVE, expand=True)

    async def log_mood(e):
        """
        Handles logging a new mood entry by sending data to the FastAPI backend.
        """
        current_mood = int(mood_slider.value)

        # Call the service method to log mood
        new_entry = await service.log_mood(user_id, current_mood)

        if new_entry:
            # Get timestamp from the backend response if available, otherwise use local
            timestamp = new_entry.get("timestamp", datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            mood_log_display.controls.insert(
                0, # Insert at the beginning to show latest first
                ft.Text(f"[{timestamp}] Mood: {current_mood} {'⭐' * current_mood}", size=14)
            )
            page.snack_bar = ft.SnackBar(ft.Text("Mood logged successfully!"), open=True)
        else:
            page.snack_bar = ft.SnackBar(ft.Text("Failed to log mood. Please check backend connection."), open=True)
        page.update()

    async def load_mood_entries():
        """
        Loads existing mood entries from the backend and updates the UI.
        """
        mood_log_display.controls.clear() # Clear existing entries before loading new ones
        entries = await service.get_mood_entries(user_id)
        if entries:
            for entry in entries:
                mood_log_display.controls.append(
                    ft.Text(f"[{entry['timestamp']}] Mood: {entry['mood_score']} {'⭐' * entry['mood_score']}", size=14)
                )
        else:
            mood_log_display.controls.append(ft.Text("No mood entries yet.", size=14, color=ft.colors.GREY_500))
        page.update()

    mood_tracker_content = ft.Column(
        [
            ft.Text("Track Your Mood", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            mood_feedback_text,
            mood_slider,
            ft.ElevatedButton("Log Mood", on_click=log_mood, icon=ft.icons.EMOJI_EMOTIONS),
            ft.Divider(),
            ft.Text("Recent Mood Logs:", size=18, weight=ft.FontWeight.BOLD),
            ft.Container(
                content=mood_log_display,
                height=200,
                width=page.window_width * 0.8, # Make it responsive
                padding=10,
                border=ft.border.all(1, ft.colors.GREY_300),
                border_radius=ft.border_radius.all(10),
                expand=True
            )
        ],
        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
        spacing=20,
        expand=True
    )

    # Journaling Tab Content
    journal_entry_field = ft.TextField(
        label="Write your journal entry here...",
        multiline=True,
        min_lines=5,
        max_lines=10,
        expand=True,
        border_radius=ft.border_radius.all(10)
    )
    journal_log_display = ft.Column([], scroll=ft.ScrollMode.ADAPTIVE, expand=True)

    async def save_journal_entry(e):
        """
        Handles saving a new journal entry by sending data to the FastAPI backend.
        """
        entry_text = journal_entry_field.value.strip()
        if entry_text:
            # Call the service method to save journal entry
            new_entry = await service.save_journal_entry(user_id, entry_text)

            if new_entry:
                timestamp = new_entry.get("timestamp", datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
                journal_log_display.controls.insert(
                    0, # Insert at the beginning to show latest first
                    ft.Card(
                        content=ft.Container(
                            content=ft.Column(
                                [
                                    ft.Text(f"[{timestamp}]", size=12, color=ft.colors.GREY_600),
                                    ft.Text(entry_text, size=14, selectable=True),
                                ],
                                spacing=5
                            ),
                            padding=10,
                        ),
                        elevation=2,
                        margin=ft.margin.only(bottom=10)
                    )
                )
                journal_entry_field.value = "" # Clear the field
                page.snack_bar = ft.SnackBar(ft.Text("Journal entry saved successfully!"), open=True)
            else:
                page.snack_bar = ft.SnackBar(ft.Text("Failed to save journal entry. Check backend."), open=True)
        else:
            page.snack_bar = ft.SnackBar(ft.Text("Journal entry cannot be empty!"), open=True)
        page.update()

    async def load_journal_entries():
        """
        Loads existing journal entries from the backend and updates the UI.
        """
        journal_log_display.controls.clear() # Clear existing entries before loading new ones
        entries = await service.get_journal_entries(user_id)
        if entries:
            for entry in entries:
                journal_log_display.controls.append(
                    ft.Card(
                        content=ft.Container(
                            content=ft.Column(
                                [
                                    ft.Text(f"[{entry['timestamp']}]", size=12, color=ft.colors.GREY_600),
                                    ft.Text(entry['entry_text'], size=14, selectable=True),
                                ],
                                spacing=5
                            ),
                            padding=10,
                        ),
                        elevation=2,
                        margin=ft.margin.only(bottom=10)
                    )
                )
        else:
            journal_log_display.controls.append(ft.Text("No journal entries yet.", size=14, color=ft.colors.GREY_500))
        page.update()

    journaling_content = ft.Column(
        [
            ft.Text("Your Daily Journal", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            journal_entry_field,
            ft.ElevatedButton("Save Entry", on_click=save_journal_entry, icon=ft.icons.BOOKMARK_ADD),
            ft.Divider(),
            ft.Text("Recent Journal Entries:", size=18, weight=ft.FontWeight.BOLD),
            ft.Container(
                content=journal_log_display,
                height=250,
                width=page.window_width * 0.8, # Make it responsive
                padding=10,
                border=ft.border.all(1, ft.colors.GREY_300),
                border_radius=ft.border_radius.all(10),
                expand=True
            )
        ],
        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
        spacing=20,
        expand=True
    )

    # Insights Tab Content
    insights_recommendations_display = ft.Column([], expand=True)

    async def load_insights():
        """
        Loads insights and recommendations from the backend and updates the UI.
        """
        insights_recommendations_display.controls.clear()
        recommendations = await service.get_insights(user_id)

        if recommendations:
            for rec in recommendations:
                insights_recommendations_display.controls.append(
                    ft.Card(
                        content=ft.Container(
                            content=ft.Column(
                                [
                                    ft.Text(f"Type: {rec.get('type', 'N/A')}", size=12, color=ft.colors.BLUE_GREY_600),
                                    ft.Text(rec.get('content', 'No content'), size=14, selectable=True),
                                    ft.Text(f"Source: {rec.get('source', 'Internal')}", size=10, color=ft.colors.GREY_500)
                                ],
                                spacing=5
                            ),
                            padding=15,
                        ),
                        elevation=2,
                        margin=ft.margin.only(bottom=10)
                    )
                )
        else:
            insights_recommendations_display.controls.append(ft.Text("No insights available yet.", size=14, color=ft.colors.GREY_500))
        page.update()

    insights_content = ft.Column(
        [
            ft.Text("Your Wellness Insights", size=24, weight=ft.FontWeight.BOLD),
            ft.Divider(),
            ft.Text("Mood Trends Over Time (Matplotlib Integration Here)", size=18),
            ft.Container(
                content=ft.Image(
                    src="https://placehold.co/400x200/cccccc/333333?text=Mood+Trend+Graph",
                    width=400,
                    height=200,
                    fit=ft.ImageFit.CONTAIN
                ),
                alignment=ft.alignment.center,
                margin=ft.margin.symmetric(vertical=10)
            ),
            ft.Text("Journaling Frequency (Matplotlib Integration Here)", size=18),
            ft.Container(
                content=ft.Image(
                    src="https://placehold.co/400x150/cccccc/333333?text=Journal+Frequency+Graph",
                    width=400,
                    height=150,
                    fit=ft.ImageFit.CONTAIN
                ),
                alignment=ft.alignment.center,
                margin=ft.margin.symmetric(vertical=10)
            ),
            ft.Text("Personalized Coping Strategies & Recommendations:", size=18, weight=ft.FontWeight.BOLD),
            ft.Container(
                content=insights_recommendations_display,
                height=200, # Adjust height as needed
                width=page.window_width * 0.8,
                padding=10,
                border=ft.border.all(1, ft.colors.GREY_300),
                border_radius=ft.border_radius.all(10),
                expand=True
            )
        ],
        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
        spacing=20,
        scroll=ft.ScrollMode.ADAPTIVE,
        expand=True
    )

    # --- Main Layout with Navigation Bar ---
    async def change_tab(e):
        """
        Handles changing the displayed content based on selected tab and loads data.
        """
        selected_index = e.control.selected_index
        if selected_index == 0:
            content_area.content = mood_tracker_content
            await load_mood_entries() # Load moods when tab is selected
        elif selected_index == 1:
            content_area.content = journaling_content
            await load_journal_entries() # Load journals when tab is selected
        elif selected_index == 2:
            content_area.content = insights_content
            await load_insights() # Load insights when tab is selected
        page.update()

    content_area = ft.Container(
        content=mood_tracker_content, # Default content
        expand=True,
        alignment=ft.alignment.top_center,
        padding=20
    )

    async def initialize_app():
        """
        Initializes the user and loads initial data when the app starts.
        """
        # Try to get the user; if not found, create them
        user = await service.get_user(user_id)
        if not user:
            print(f"User '{user_id}' not found, creating new user...")
            new_user = await service.create_user(user_id, username)
            if new_user:
                print(f"User '{username}' created successfully.")
            else:
                print(f"Failed to create user '{username}'. App may not function correctly.")
                page.snack_bar = ft.SnackBar(ft.Text("Failed to initialize user. Check backend."), open=True)
                page.update()
        else:
            print(f"User '{username}' ({user_id}) already exists.")

        # Load initial data for the default tab (Mood Tracker)
        await load_mood_entries()
        page.update()

    async def on_page_close(e):
        """
        Closes the HTTP client session when the Flet application closes.
        """
        await service.close()
        print("HTTP client session closed.")

    page.on_disconnect = on_page_close # For web apps
    page.on_close = on_page_close     # For desktop apps

    page.add(
        ft.Column(
            [
                ft.AppBar(
                    title=ft.Text("Mental Health Tracker", weight=ft.FontWeight.BOLD),
                    center_title=True,
                    bgcolor=ft.colors.BLUE_GREY_700,
                    color=ft.colors.WHITE,
                    actions=[
                        ft.IconButton(ft.icons.SETTINGS, tooltip="Settings"),
                        ft.IconButton(ft.icons.HELP_OUTLINE, tooltip="Help"),
                    ],
                ),
                ft.Container(
                    content=ft.Column(
                        [
                            ft.Text(f"Welcome, {username}!", size=16, weight=ft.FontWeight.W_500),
                            ft.NavigationBar(
                                selected_index=0,
                                on_change=change_tab,
                                destinations=[
                                    ft.NavigationDestination(icon=ft.icons.EMOJI_EMOTIONS, label="Mood Tracker"),
                                    ft.NavigationDestination(icon=ft.icons.BOOK, label="Journaling"),
                                    ft.NavigationDestination(icon=ft.icons.INSIGHTS, label="Insights"),
                                ],
                                bgcolor=ft.colors.BLUE_GREY_100,
                                elevation=5,
                            ),
                        ],
                        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                        spacing=15
                    ),
                    padding=ft.padding.only(top=10, bottom=10),
                    width=page.window_width,
                    alignment=ft.alignment.center
                ),
                content_area,
            ],
            expand=True,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
            spacing=0 # Remove default spacing between columns
        )
    )

    # Run initialization tasks after page is added
    page.run_async(initialize_app())


# To run the Flet application:
# Save this file as, e.g., `app.py`
# Ensure `user_data_access.py` is in the same directory.
# Run from terminal: `flet run app.py`
# For web, use: `flet run app.py -d` or `flet run app.py --web`